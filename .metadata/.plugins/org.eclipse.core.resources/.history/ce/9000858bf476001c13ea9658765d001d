package db.query;

import java.sql.Timestamp;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import lombok.Data;

@Data
public class QueryParser {

	public String queryType(String query) {

		Pattern typePattern = Pattern.compile("(select|insert)+\\s+.*?", Pattern.CASE_INSENSITIVE);
		Matcher typeMatcher = typePattern.matcher(query);

		if (!typeMatcher.matches()) {
			System.out.println("not good type request");
			return null;
		}

		String type = typeMatcher.group(1).toLowerCase().toString();

		switch (type) {

		case "select": {
			System.out.println("select");
			return "select";
		}
		case "insert": {
			System.out.println("insert");
			return "insert";
		}
		default: {
			System.out.println("other type");
		}
		}

		return null;
	}

	public SelectQuery selectParser(String query) {

		Pattern selectPattern = Pattern.compile("select\\s*+(.*?)\\s*+from\\s*+(.*?)(?:\\s*+where\\s*+(.*?))?;",
				Pattern.CASE_INSENSITIVE);
		Matcher selectMatcher = selectPattern.matcher(query);

		if (!selectMatcher.matches()) {
			System.out.println("bad select request");
			return null;
		}

		if (selectMatcher.group(1).isEmpty()) {
			System.out.println("no field");
			return null;
		}

		String[] fields = selectMatcher.group(1).toString().split("\\s*,\\s*");

		if (selectMatcher.group(2).isEmpty()) {
			System.out.println("no table");
			return null;
		}

		String table = selectMatcher.group(2).toString();

		String condition = null;
		if (!selectMatcher.group(3).isEmpty()) {
			condition = selectMatcher.group(3).toString();
		}

		SelectQuery mySelect = new SelectQuery();
		for (int i = 0; i < fields.length; i++) {
			mySelect.addField(fields[i]);
		}
		mySelect.setTableName(table);
		mySelect.setConditions(condition);

		return mySelect;

	}

	public InsertQuery insertParser(String query) {

		Pattern insertPattern = Pattern.compile("insert\\s*+into\\s*+(.*?)\\s*+values\\s*+\\((.*?)\\);",
				Pattern.CASE_INSENSITIVE);
		Matcher insertMatcher = insertPattern.matcher(query);

		if (!insertMatcher.matches()) {
			System.out.println("bad insert request");
			return null;
		}

		if (insertMatcher.group(1).isEmpty()) {
			System.out.println("no table");
			return null;
		}

		String table = insertMatcher.group(1).toString();

		if (insertMatcher.group(2).isEmpty()) {
			System.out.println("no value to add");
			return null;
		}

		String[] values = insertMatcher.group(2).toString().split("\\s*,\\s*");

		if (values[0].isEmpty()) {
			System.out.println("no timestamp");
			return null;
		}
		if (values[1].isEmpty()) {
			System.out.println("no value");
			return null;
		}

		// TODO verifier que la valeur est un int32/int64

		Timestamp timestamp = null;
		String value = values[1];

		try {
			timestamp = Timestamp.valueOf(values[0]);
		} catch (Exception e) {
			System.out.println("bad timestamp");
			return null;
		}

		InsertQuery myInsert = new InsertQuery();
		myInsert.setTableName(table);

		myInsert.setDate(timestamp);
		myInsert.setValue(value);

		return myInsert;
	}

	public Condition conditionParser(String condition) {

		Pattern conditionPattern = Pattern.compile("(.*?)\\s+(.*?)\\s+(.*?)", Pattern.CASE_INSENSITIVE);
		Matcher conditionMatcher = conditionPattern.matcher(condition);

		if (!conditionMatcher.matches()) {
			System.out.println("bad condition request : " + condition);
			return null;
		}

		if (conditionMatcher.group(1).isEmpty()) {
			System.out.println("bad condition request : " + condition);
			return null;
		}

		String champ1 = conditionMatcher.group(1).toString();

		if (conditionMatcher.group(2).isEmpty()) {
			System.out.println("bad condition request : " + condition);
			return null;
		}

		Operator operator = null;

		switch (conditionMatcher.group(2).toString()) {
		case "=": {
			operator = Operator.OPERATOR_EQUAL;
			break;
		}
		case "!=": {
			operator = Operator.OPERATOR_DIFFERENT;
			break;
		}
		case "<=": {
			operator = Operator.OPERATOR_LOWER_OR_EQUAL;
			break;
		}
		case ">=": {
			operator = Operator.OPERATOR_HIGHER_OR_EQUAL;
			break;
		}
		case "<": {
			operator = Operator.OPERATOR_LOWER;
			break;
		}
		case ">": {
			operator = Operator.OPERATOR_HIGHER;
			break;
		}
		}

		if (operator == null) {
			System.out.println("bad operator : " + conditionMatcher.group(2).toString());
			return null;
		}

		if (conditionMatcher.group(3).isEmpty()) {
			System.out.println("bad condition request : " + condition);
			return null;
		}

		String champ2 = conditionMatcher.group(3).toString();

		Condition returnCondition = new Condition();
		returnCondition.setField1(champ1);
		returnCondition.setField2(champ2);
		returnCondition.setOperator(operator);

		return returnCondition;
	}

	public Object andOrParser(String conditions) {
		String[] andOrConditions = conditions.toLowerCase().split("(and|or)");

		if (andOrConditions.length > 2) {
			System.out.println("too many arguments");
			return null;
		}
		if (andOrConditions.length < 1) {
			System.out.println("bad arguments");
			return null;
		}

		String andOrCondition = null;
		if (Pattern.compile("and", Pattern.CASE_INSENSITIVE).matcher(conditions).matches()) {
			andOrCondition = "and";
		}
		if (Pattern.compile("or", Pattern.CASE_INSENSITIVE).matcher(conditions).matches()) {
			andOrCondition = "or";
		}

		Condition condition1 = conditionParser(andOrConditions[0].toString());
		Condition condition2 = conditionParser(andOrConditions[1].toString());

		if (andOrCondition == "or" && condition1!=null && condition1!=null) {
			return new OrCondition(condition1, condition2);
		} else if(andOrCondition == "and" && condition1!=null && condition1!=null){
			return new AndCondition(condition1, condition2);
		}

	}

}

